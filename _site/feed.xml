<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dgmouris  </title>
    <description>Dan Mouris's blog on technical things</description>
    <link>http://dgmouris.com//</link>
    <atom:link href="http://dgmouris.com//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 16 Jan 2017 19:17:19 -0700</pubDate>
    <lastBuildDate>Mon, 16 Jan 2017 19:17:19 -0700</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Yaml Explained</title>
        <description>&lt;p&gt;Yaml stands for “Yaml Ain’t Markup Language” and is the core of Ansible and writing playbooks. Almost all of Ansible “code” for configuration management is written in Yaml, so I wanted to use this blog post to cover the basics.&lt;/p&gt;

&lt;p&gt;In this tutorial I will cover how files are formatted, and how to use lists, key value pairs and other data structures in a Yaml file.&lt;/p&gt;

&lt;p&gt;To begin a file in Yaml you need to create a simple text file with three dashes at the top of the page and save it with the “.yml” file extension. Congratulations, you’ve just created your first Yaml file!&lt;/p&gt;

&lt;p&gt;To create a comment in Yaml (where a comment is purely a note for yourself in the code) you need to use the # sign. The below code snippet shows an example of the beginning of a file with a comment in it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Yay my first Yaml file!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next, let’s create a key value pair in Yaml. A key value pair can be as simple as setting my name, age and the current date as it looks like below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Yay my first Yaml file!&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Daniel Mouris&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;Age&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;CurrentDate&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;13/09/2016&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In case you aren’t familiar with a key value pair, in the above example everything before the colon is a key and everything after the colon is the value.&lt;/p&gt;

&lt;p&gt;To create a key with a multiline value, you need to add a | (normally named pipe) after the key value. Below is an example of this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Yay my first Yaml file!&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Daniel Mouris&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;Age&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;CurrentDate&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;13/09/2016&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;Interests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Daniel loves to code and learn new things.&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Daniel also loves his wonderfully cute kittes,&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;whose names are Ghost and Gambit.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ansible does a great job at detecting Yaml datatypes, but you might want to be specific. Below are examples of datatypes that you can specify in Yaml:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Yay my first Yaml file!&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;integer-example&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;97&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# this is an integer&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;string-exmpale&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;97&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# this is a string&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;float-example&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;97.0&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# this is a float&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;string-non-ambiguous&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;!!str&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;97&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# explicitly set as string&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;float-non-ambiguous&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;!!float&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;97&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# explicitly set as a float&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;boolean-true&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Yes&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#treats yes like a true statement in code&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;another-string-example&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;No sir, the oilers lost today.&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# treats yes and no like a string instead of boolean&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, Yaml tries to be as intuitive as possible when evaluating your variable names.&lt;/p&gt;

&lt;p&gt;Next we can look at lists. Lists in Yaml are pretty intuitive and are denoted with a “-“ before your key value pairs. Below shows an example of multiple lists:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dan&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;cats&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ghost&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gambit&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;amber&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;cats&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mocha&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;topaz&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see above, there are dashes in front of &lt;em&gt;name&lt;/em&gt; as well as  below &lt;em&gt;cats&lt;/em&gt;. The dashes in front of &lt;em&gt;name&lt;/em&gt; show that everthing with that indentation level will be in that list item. This means that &lt;em&gt;ghost&lt;/em&gt; and &lt;em&gt;gambit&lt;/em&gt; are &lt;em&gt;cats&lt;/em&gt;, that are in the same group as &lt;em&gt;dan&lt;/em&gt;. Ansible uses lists like the above (except with more meaningful values) to perform all of the tasks to create your configuration on your server/database/networking service that you’re using.&lt;/p&gt;

&lt;p&gt;The final thing that I will be covering in this short tutorial is including files in Yaml. Below shows a Yaml file that includes two files, &lt;em&gt;a-different-Yaml
-file.yml&lt;/em&gt; and &lt;em&gt;another-Yaml-file.yml&lt;/em&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;a-different-Yaml-file.yml&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;another-Yaml-file.yml&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Hopefully you have enjoyed my overview of Yaml; the above should give you enough to begin to understand the Yaml formatting. In the future, I will be looking at how to use Yaml variables from other filenames (for when you come across them in Ansible). Now, if you go look at an Ansible Yaml file, you might not be able to understand all of the modules but you should be able to follow along. Hopefully, by keeping up with future blog posts for this tutorial, you’ll learn more how Ansible is great and how it will help you.&lt;/p&gt;
</description>
        <pubDate>Wed, 14 Sep 2016 00:00:00 -0600</pubDate>
        <link>http://dgmouris.com//blog/2016/09/14/Yaml-Explained.html</link>
        <guid isPermaLink="true">http://dgmouris.com//blog/2016/09/14/Yaml-Explained.html</guid>
        
        <category>welcome</category>
        
        <category>Ansible</category>
        
        <category>Yaml</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>What is Ansible?</title>
        <description>&lt;h3 id=&quot;what-is-ansible&quot;&gt;What is Ansible?&lt;/h3&gt;

&lt;p&gt;Ansible is a platform for automation, configuration management and deployments of your web/cloud infrastructure. Ansible uses playbooks to deploy, manage and configure anything that has an ssh connection.&lt;/p&gt;

&lt;p&gt;Configuration management of your infrastructure is one of the most essential parts of DevOps to ensure continous delivery of your code. Ansible makes configuration management a lot easier, since you can keep all of your configuration for an envrionment in a single git repository.&lt;/p&gt;

&lt;h3 id=&quot;what-are-the-benefits-of-ansible&quot;&gt;What are the benefits of Ansible?&lt;/h3&gt;

&lt;p&gt;One of the greatest benefits of Ansible is that it can be made responsible for everything that is related to your servers, databases and networking infrastructure. Ansible also gives you the flexibility to do manual configuration later on. It does not depend on a single “Master Server” because it sends the same configuration to all servers.&lt;/p&gt;

&lt;p&gt;Another great benefit of Ansible is that the barrier to entry is fairly low. If you’ve read a yaml file before, or even if you haven’t, it’s pretty easy to follow. Below is an example of a yaml file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dan&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;cats&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ghost&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gambit&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;amber&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;cats&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mocha&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;topaz&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;what-are-the-other-tools-in-the-ansible-space&quot;&gt;What are the other tools in the Ansible space?&lt;/h3&gt;
&lt;p&gt;The following list includes deployment configuration management tools like Ansible:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Jenkins
- Salt
- Puppet
- Chef
- Fabric
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Although the tools in the above list compete with Ansible in some respect, they can also be used with Ansible for an infrastructure deployment. Many times Ansible is used in tandem with these tools for a deployment.&lt;/p&gt;

&lt;h3 id=&quot;how-does-ansible-differ-to-these-tools&quot;&gt;How does Ansible differ to these tools?&lt;/h3&gt;
&lt;p&gt;Here’s how Ansible differs from Puppet and Chef.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Puppet and Chef contain a centralized master/controller server setup that is responsbile for the deployments. Since Ansible only uses ssh, any server/machine at any time can assume that role.
- Ansible uses the &quot;push&quot; method for configuration management. There are two benefits to this.
	1. Does not need any client-side installs.
	2. Does not need a master server.
- Ansible uses a top to bottom approach (executes sequentially), unlike puppet which does not execute commands as they appear in the manifest.
- Syntax is based on yaml, unlike Puppet that uses custom DSL. This makes configurations easier to read.
- Ansible is built with Python, where Chef and Puppet are built with Ruby.
- Chef breaks it's deployment process into two steps. The first is the compilation phase and the second is execution. By default, state is stored during compilation phase unless the &quot;lazy&quot; option is used.*****
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In future posts, I will go into more elaboration about how Ansible differs from Salt, Jenkins and Fabric.&lt;/p&gt;

&lt;p&gt;This was a short introduction to what ansible is, and what are similar technologies to ansible. I will be posting more tutorials on ansible as well as other technology topics.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed my post, if you want to reach out please contact me via email or linkedin.&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Sep 2016 00:00:00 -0600</pubDate>
        <link>http://dgmouris.com//ansible/2016/09/11/What-is-ansible.html</link>
        <guid isPermaLink="true">http://dgmouris.com//ansible/2016/09/11/What-is-ansible.html</guid>
        
        <category>First post</category>
        
        <category>welcome</category>
        
        
        <category>ansible</category>
        
      </item>
    
      <item>
        <title>My First Post</title>
        <description>&lt;p&gt;Hello people who will be reading my blog.&lt;/p&gt;

&lt;p&gt;The purpose of this blog will be to share my experiences in being a developer, tips as well as tutorials to try to help and give back.&lt;/p&gt;

&lt;p&gt;All of the content and any opinions on this blog are my own and do not reflect the opinions of my employers.&lt;/p&gt;

&lt;p&gt;As a convention, I will be using the following formatting in my blog to make things easier for people to understand.&lt;/p&gt;

&lt;p&gt;Linux and Bash Scripts&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Welcome to my blog'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Python and Django&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Welcome to my blog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Javascript and Jquery&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Welcome to my blog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;MySQL and PostGreSQL&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;post_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Welcome to my blog'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Thank you very much and feel free to contact me any time.&lt;/p&gt;
</description>
        <pubDate>Sun, 04 Sep 2016 00:00:00 -0600</pubDate>
        <link>http://dgmouris.com//test/2016/09/04/My-First-Post.html</link>
        <guid isPermaLink="true">http://dgmouris.com//test/2016/09/04/My-First-Post.html</guid>
        
        <category>First post</category>
        
        <category>welcome</category>
        
        
        <category>test</category>
        
      </item>
    
  </channel>
</rss>
